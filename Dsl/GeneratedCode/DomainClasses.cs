//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass SoSa
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.SoSa.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.SoSa.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("34a83d02-3c11-4ee2-97cd-4136131cdc2e")]
	public partial class SoSa : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SoSa domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x34a83d02, 0x3c11, 0x4ee2, 0x97, 0xcd, 0x41, 0x36, 0x13, 0x1c, 0xdc, 0x2e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSa(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoSa(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ImpactLevels> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(global::Company.FinalVersionSoSa.SoSaHasElements.SoSaDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.FinalVersionSoSa.ImpactLevels.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.FinalVersionSoSa.ImpactLevels sourceImpactLevels1 = sourceElement as global::Company.FinalVersionSoSa.ImpactLevels;
			if (sourceImpactLevels1 != null)
			{
				// Create link for path SoSaHasElements.Elements
				this.Elements.Add(sourceImpactLevels1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.FinalVersionSoSa.ImpactLevels sourceImpactLevels1 = sourceElement as global::Company.FinalVersionSoSa.ImpactLevels;
			if (sourceImpactLevels1 != null)
			{
				// Delete link for path SoSaHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.FinalVersionSoSa.SoSaHasElements.GetLinks((global::Company.FinalVersionSoSa.SoSa)this, sourceImpactLevels1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.FinalVersionSoSa.SoSaHasElements.SoSaDomainRoleId, global::Company.FinalVersionSoSa.SoSaHasElements.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass ImpactLevels
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImpactLevels.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImpactLevels.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("9fa39b85-436d-4f68-a643-8aaa9a473411")]
	public partial class ImpactLevels : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImpactLevels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9fa39b85, 0x436d, 0x4f68, 0xa6, 0x43, 0x8a, 0xaa, 0x9a, 0x47, 0x34, 0x11);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactLevels(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpactLevels(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xfeca2dad, 0x8a4b, 0x4665, 0x84, 0xa7, 0x11, 0x23, 0x51, 0x73, 0x8d, 0xe3);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.FinalVersionSoSa.ImpactLevels.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImpactLevels/Name.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImpactLevels/Name.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("feca2dad-8a4b-4665-84a7-112351738de3")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ImpactLevels.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ImpactLevels, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ImpactLevels.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ImpactLevels.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ImpactLevels element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ImpactLevels element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SoSa opposite domain role accessor
		/// <summary>
		/// Gets or sets SoSa.
		/// </summary>
		public virtual SoSa SoSa
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.FinalVersionSoSa.SoSaHasElements.ElementDomainRoleId) as SoSa;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.FinalVersionSoSa.SoSaHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// Description for Company.FinalVersionSoSa.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ImpactLevels> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// Description for Company.FinalVersionSoSa.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ImpactLevels> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets.TargetDomainRoleId);
			}
		}
		#endregion
		#region Concerned opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Concerned.
		/// Description for Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ImpactLevels
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> Concerned
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ImpactLevelsDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.FinalVersionSoSa.Concern.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.FinalVersionSoSa.Concern sourceConcern1 = sourceElement as global::Company.FinalVersionSoSa.Concern;
			if (sourceConcern1 != null)
			{
				// Create link for path ImpactLevelsHasConcerned.Concerned
				this.Concerned.Add(sourceConcern1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.FinalVersionSoSa.Concern sourceConcern1 = sourceElement as global::Company.FinalVersionSoSa.Concern;
			if (sourceConcern1 != null)
			{
				// Delete link for path ImpactLevelsHasConcerned.Concerned
				
				foreach (DslModeling::ElementLink link in global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned.GetLinks((global::Company.FinalVersionSoSa.ImpactLevels)this, sourceConcern1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ImpactLevelsDomainRoleId, global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ConcernDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass SystematicLevel
	/// Description for Company.FinalVersionSoSa.SystematicLevel
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.SystematicLevel.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.SystematicLevel.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9fd5b673-6641-4713-99fa-48e69742f026")]
	public partial class SystematicLevel : ImpactLevels
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SystematicLevel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9fd5b673, 0x6641, 0x4713, 0x99, 0xfa, 0x48, 0xe6, 0x97, 0x42, 0xf0, 0x26);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SystematicLevel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SystematicLevel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass EnablingLevel
	/// Description for Company.FinalVersionSoSa.EnablingLevel
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.EnablingLevel.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.EnablingLevel.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("09ea532f-7504-449c-a7d2-936ce49ea73c")]
	public partial class EnablingLevel : ImpactLevels
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnablingLevel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x09ea532f, 0x7504, 0x449c, 0xa7, 0xd2, 0x93, 0x6c, 0xe4, 0x9e, 0xa7, 0x3c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnablingLevel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnablingLevel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass ImmediateLevel
	/// Description for Company.FinalVersionSoSa.ImmediateLevel
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImmediateLevel.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImmediateLevel.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f37f5f6c-ebe0-4501-9ad1-50417045a87a")]
	public partial class ImmediateLevel : ImpactLevels
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImmediateLevel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf37f5f6c, 0xebe0, 0x4501, 0x9a, 0xd1, 0x50, 0x41, 0x70, 0x45, 0xa8, 0x7a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImmediateLevel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImmediateLevel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Solution_Name opposite domain role accessor
		/// <summary>
		/// Gets or sets Solution_Name.
		/// Description for
		/// Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.ImmediateLevel
		/// </summary>
		public virtual Solution_Name Solution_Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.ImmediateLevelDomainRoleId) as Solution_Name;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.ImmediateLevelDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.FinalVersionSoSa.Solution_Name.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: ImmediateLevelHasSolution_Name.Solution_Name
					if (this.Solution_Name != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.FinalVersionSoSa.Solution_Name sourceSolution_Name1 = sourceElement as global::Company.FinalVersionSoSa.Solution_Name;
			if (sourceSolution_Name1 != null)
			{
				// Create link for path ImmediateLevelHasSolution_Name.Solution_Name
				this.Solution_Name = sourceSolution_Name1;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.FinalVersionSoSa.Solution_Name sourceSolution_Name1 = sourceElement as global::Company.FinalVersionSoSa.Solution_Name;
			if (sourceSolution_Name1 != null)
			{
				// Delete link for path ImmediateLevelHasSolution_Name.Solution_Name
				
				foreach (DslModeling::ElementLink link in global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.GetLinks((global::Company.FinalVersionSoSa.ImmediateLevel)this, sourceSolution_Name1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.ImmediateLevelDomainRoleId, global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.Solution_NameDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass Solution_Name
	/// Description for Company.FinalVersionSoSa.Solution_Name
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.Solution_Name.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.Solution_Name.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("299988d4-23ba-4866-80b3-4ea23a1dfb26")]
	public partial class Solution_Name : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Solution_Name domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x299988d4, 0x23ba, 0x4866, 0x80, 0xb3, 0x4e, 0xa2, 0x3a, 0x1d, 0xfb, 0x26);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Solution_Name(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Solution_Name(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc79f39e0, 0x6ace, 0x4b6f, 0xae, 0x05, 0x17, 0xc5, 0x71, 0xc3, 0x9d, 0x46);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.FinalVersionSoSa.Solution_Name.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.Solution_Name/Name.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.Solution_Name/Name.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c79f39e0-6ace-4b6f-ae05-17c571c39d46")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Solution_Name.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Solution_Name, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Solution_Name.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Solution_Name.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Solution_Name element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Solution_Name element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ImmediateLevel opposite domain role accessor
		/// <summary>
		/// Gets or sets ImmediateLevel.
		/// Description for
		/// Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.Solution_Name
		/// </summary>
		public virtual ImmediateLevel ImmediateLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.Solution_NameDomainRoleId) as ImmediateLevel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.Solution_NameDomainRoleId, value);
			}
		}
		#endregion
		#region Concerned opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Concerned.
		/// Description for
		/// Company.FinalVersionSoSa.Solution_NameReferencesConcerned.Solution_Name
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> Concerned
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned.Solution_NameDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass Concern
	/// Description for Company.FinalVersionSoSa.Concern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.Concern.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.Concern.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("db78ea22-6ae4-4d29-8752-f81b8567cb2b")]
	public partial class Concern : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Concern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdb78ea22, 0x6ae4, 0x4d29, 0x87, 0x52, 0xf8, 0x1b, 0x85, 0x67, 0xcb, 0x2b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Concern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x881956e1, 0x788d, 0x47b8, 0x93, 0xba, 0x4d, 0xc1, 0x91, 0xb3, 0x80, 0xdc);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.FinalVersionSoSa.Concern.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.Concern/Name.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.Concern/Name.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("881956e1-788d-47b8-93ba-4dc191b380dc")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Concern.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Concern, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Concern.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Concern.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Concern element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Concern element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ImpactLevels opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpactLevels.
		/// Description for Company.FinalVersionSoSa.ImpactLevelsHasConcerned.Concern
		/// </summary>
		public virtual ImpactLevels ImpactLevels
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ConcernDomainRoleId) as ImpactLevels;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ConcernDomainRoleId, value);
			}
		}
		#endregion
		#region TargetConcerned opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetConcerned.
		/// Description for
		/// Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.SourceConcern
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> TargetConcerned
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.SourceConcernDomainRoleId);
			}
		}
		#endregion
		#region SourceConcerned opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceConcerned.
		/// Description for
		/// Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.TargetConcern
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Concern> SourceConcerned
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.TargetConcernDomainRoleId);
			}
		}
		#endregion
		#region Solution_Named opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Solution_Named.
		/// Description for
		/// Company.FinalVersionSoSa.Solution_NameReferencesConcerned.Concern
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Solution_Name> Solution_Named
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Solution_Name>, Solution_Name>(global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned.ConcernDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass SocialConcern
	/// Description for Company.FinalVersionSoSa.SocialConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.SocialConcern.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.SocialConcern.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7b085956-7030-420b-980f-80420f873438")]
	public partial class SocialConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SocialConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7b085956, 0x7030, 0x420b, 0x98, 0x0f, 0x80, 0x42, 0x0f, 0x87, 0x34, 0x38);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocialConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SocialConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass EconomicalConcern
	/// Description for Company.FinalVersionSoSa.EconomicalConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.EconomicalConcern.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.EconomicalConcern.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a06d961c-f94c-4d6d-8dfa-4198b41a2753")]
	public partial class EconomicalConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EconomicalConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa06d961c, 0xf94c, 0x4d6d, 0x8d, 0xfa, 0x41, 0x98, 0xb4, 0x1a, 0x27, 0x53);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EconomicalConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EconomicalConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass EnvironmentalConcern
	/// Description for Company.FinalVersionSoSa.EnvironmentalConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.EnvironmentalConcern.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.EnvironmentalConcern.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9d2b99d3-3218-4185-9fa6-ae34fb2f7888")]
	public partial class EnvironmentalConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnvironmentalConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9d2b99d3, 0x3218, 0x4185, 0x9f, 0xa6, 0xae, 0x34, 0xfb, 0x2f, 0x78, 0x88);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnvironmentalConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnvironmentalConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass TechnicalConcern
	/// Description for Company.FinalVersionSoSa.TechnicalConcern
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.TechnicalConcern.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.TechnicalConcern.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2e77c64c-b37d-40cb-98da-8f3cb238cbb3")]
	public partial class TechnicalConcern : Concern
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TechnicalConcern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2e77c64c, 0xb37d, 0x40cb, 0x98, 0xda, 0x8f, 0x3c, 0xb2, 0x38, 0xcb, 0xb3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TechnicalConcern(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TechnicalConcern(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
