//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainRelationship SoSaHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.SoSaHasElements.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.SoSaHasElements.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6975b9fa-087b-44ae-8247-b822c3d6855f")]
	public partial class SoSaHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SoSaHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6975b9fa, 0x087b, 0x44ae, 0x82, 0x47, 0xb8, 0x22, 0xc3, 0xd6, 0x85, 0x5f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SoSaHasElements link in the same Partition as the given SoSa
		/// </summary>
		/// <param name="source">SoSa to use as the source of the relationship.</param>
		/// <param name="target">ImpactLevels to use as the target of the relationship.</param>
		public SoSaHasElements(SoSa source, ImpactLevels target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SoSaHasElements.SoSaDomainRoleId, source), new DslModeling::RoleAssignment(SoSaHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSaHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSaHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoSaHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoSaHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoSa domain role code
		
		/// <summary>
		/// SoSa domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoSaDomainRoleId = new global::System.Guid(0xb3c52783, 0xe317, 0x4daf, 0xb5, 0xba, 0xa7, 0xb6, 0xd5, 0x92, 0x49, 0x66);
		
		/// <summary>
		/// DomainRole SoSa
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.SoSaHasElements/SoSa.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.SoSaHasElements/SoSa.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.FinalVersionSoSa.SoSaHasElements/SoSa.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b3c52783-e317-4daf-b5ba-a7b6d5924966")]
		public virtual SoSa SoSa
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoSa)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoSaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoSaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SoSa of a ImpactLevels
		/// <summary>
		/// Gets SoSa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoSa GetSoSa(ImpactLevels element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as SoSa;
		}
		
		/// <summary>
		/// Sets SoSa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSoSa(ImpactLevels element, SoSa newSoSa)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newSoSa);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xbf9ceef6, 0x830c, 0x4252, 0xb0, 0x04, 0x50, 0x5c, 0xf4, 0x5b, 0x86, 0x8f);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.SoSaHasElements/Element.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.SoSaHasElements/Element.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SoSa", PropertyDisplayNameKey="Company.FinalVersionSoSa.SoSaHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bf9ceef6-830c-4252-b004-505cf45b868f")]
		public virtual ImpactLevels Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevels)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a SoSa
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ImpactLevels> GetElements(SoSa element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(element, SoSaDomainRoleId);
		}
		#endregion
		#region SoSa link accessor
		/// <summary>
		/// Get the list of SoSaHasElements links to a SoSa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.SoSaHasElements> GetLinksToElements ( global::Company.FinalVersionSoSa.SoSa soSaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.SoSaHasElements>(soSaInstance, global::Company.FinalVersionSoSa.SoSaHasElements.SoSaDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the SoSaHasElements link to a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FinalVersionSoSa.SoSaHasElements GetLinkToSoSa (global::Company.FinalVersionSoSa.ImpactLevels elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.SoSaHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.SoSaHasElements>(elementInstance, global::Company.FinalVersionSoSa.SoSaHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SoSaHasElements instance accessors
		
		/// <summary>
		/// Get any SoSaHasElements links between a given SoSa and a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.SoSaHasElements> GetLinks( global::Company.FinalVersionSoSa.SoSa source, global::Company.FinalVersionSoSa.ImpactLevels target )
		{
			global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.SoSaHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.SoSaHasElements>();
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.SoSaHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.SoSaHasElements>(source, global::Company.FinalVersionSoSa.SoSaHasElements.SoSaDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.SoSaHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SoSaHasElements link between a given SoSaand a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FinalVersionSoSa.SoSaHasElements GetLink( global::Company.FinalVersionSoSa.SoSa source, global::Company.FinalVersionSoSa.ImpactLevels target )
		{
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.SoSaHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.SoSaHasElements>(source, global::Company.FinalVersionSoSa.SoSaHasElements.SoSaDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.SoSaHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainRelationship ImpactLevelsReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImpactLevelsReferencesTargets.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImpactLevelsReferencesTargets.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("aa6b75e7-bbca-4291-b9d9-676072540842")]
	public partial class ImpactLevelsReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImpactLevelsReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa6b75e7, 0xbbca, 0x4291, 0xb9, 0xd9, 0x67, 0x60, 0x72, 0x54, 0x08, 0x42);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImpactLevelsReferencesTargets link in the same Partition as the given ImpactLevels
		/// </summary>
		/// <param name="source">ImpactLevels to use as the source of the relationship.</param>
		/// <param name="target">ImpactLevels to use as the target of the relationship.</param>
		public ImpactLevelsReferencesTargets(ImpactLevels source, ImpactLevels target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImpactLevelsReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(ImpactLevelsReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x227a3f86, 0xf2e2, 0x474d, 0xb0, 0xd9, 0x79, 0x57, 0x6e, 0x9c, 0xb5, 0xb0);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.FinalVersionSoSa.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImpactLevelsReferencesTargets/Source.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImpactLevelsReferencesTargets/Source.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.FinalVersionSoSa.ImpactLevelsReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("227a3f86-f2e2-474d-b0d9-79576e9cb5b0")]
		public virtual ImpactLevels Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevels)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a ImpactLevels
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ImpactLevels> GetSources(ImpactLevels element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x6bb5ffbe, 0x74c6, 0x4c5c, 0xa4, 0x1a, 0x73, 0x1c, 0x68, 0x6b, 0xcf, 0xc3);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.FinalVersionSoSa.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImpactLevelsReferencesTargets/Target.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImpactLevelsReferencesTargets/Target.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.FinalVersionSoSa.ImpactLevelsReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6bb5ffbe-74c6-4c5c-a41a-731c686bcfc3")]
		public virtual ImpactLevels Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevels)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a ImpactLevels
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ImpactLevels> GetTargets(ImpactLevels element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ImpactLevels>, ImpactLevels>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of ImpactLevelsReferencesTargets links to a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets> GetLinksToTargets ( global::Company.FinalVersionSoSa.ImpactLevels sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets>(sourceInstance, global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of ImpactLevelsReferencesTargets links to a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets> GetLinksToSources ( global::Company.FinalVersionSoSa.ImpactLevels targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets>(targetInstance, global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region ImpactLevelsReferencesTargets instance accessors
		
		/// <summary>
		/// Get any ImpactLevelsReferencesTargets links between a given ImpactLevels and a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets> GetLinks( global::Company.FinalVersionSoSa.ImpactLevels source, global::Company.FinalVersionSoSa.ImpactLevels target )
		{
			global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets>(source, global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImpactLevelsReferencesTargets link between a given ImpactLevelsand a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets GetLink( global::Company.FinalVersionSoSa.ImpactLevels source, global::Company.FinalVersionSoSa.ImpactLevels target )
		{
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets>(source, global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.ImpactLevelsReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainRelationship ImmediateLevelHasSolution_Name
	/// Description for Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ed30dcfa-6b25-41b8-aeb6-60caeb130d85")]
	public partial class ImmediateLevelHasSolution_Name : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImmediateLevelHasSolution_Name domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xed30dcfa, 0x6b25, 0x41b8, 0xae, 0xb6, 0x60, 0xca, 0xeb, 0x13, 0x0d, 0x85);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImmediateLevelHasSolution_Name link in the same Partition as the given ImmediateLevel
		/// </summary>
		/// <param name="source">ImmediateLevel to use as the source of the relationship.</param>
		/// <param name="target">Solution_Name to use as the target of the relationship.</param>
		public ImmediateLevelHasSolution_Name(ImmediateLevel source, Solution_Name target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImmediateLevelHasSolution_Name.ImmediateLevelDomainRoleId, source), new DslModeling::RoleAssignment(ImmediateLevelHasSolution_Name.Solution_NameDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImmediateLevelHasSolution_Name(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImmediateLevelHasSolution_Name(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImmediateLevelHasSolution_Name(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImmediateLevelHasSolution_Name(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ImmediateLevel domain role code
		
		/// <summary>
		/// ImmediateLevel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImmediateLevelDomainRoleId = new global::System.Guid(0xde5a4698, 0xce4c, 0x4bbd, 0xb9, 0x80, 0x3c, 0x08, 0xbf, 0x7c, 0x62, 0x38);
		
		/// <summary>
		/// DomainRole ImmediateLevel
		/// Description for
		/// Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.ImmediateLevel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name/ImmediateLevel.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name/ImmediateLevel.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Solution_Name", PropertyDisplayNameKey="Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name/ImmediateLevel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("de5a4698-ce4c-4bbd-b980-3c08bf7c6238")]
		public virtual ImmediateLevel ImmediateLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImmediateLevel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImmediateLevelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImmediateLevelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImmediateLevel of a Solution_Name
		/// <summary>
		/// Gets ImmediateLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImmediateLevel GetImmediateLevel(Solution_Name element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, Solution_NameDomainRoleId) as ImmediateLevel;
		}
		
		/// <summary>
		/// Sets ImmediateLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImmediateLevel(Solution_Name element, ImmediateLevel newImmediateLevel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, Solution_NameDomainRoleId, newImmediateLevel);
		}
		#endregion
		#region Solution_Name domain role code
		
		/// <summary>
		/// Solution_Name domain role Id.
		/// </summary>
		public static readonly global::System.Guid Solution_NameDomainRoleId = new global::System.Guid(0x17f00488, 0xb6fd, 0x49aa, 0x83, 0x07, 0x5f, 0x56, 0xe9, 0xa2, 0x5e, 0x19);
		
		/// <summary>
		/// DomainRole Solution_Name
		/// Description for
		/// Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.Solution_Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name/Solution_Name.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name/Solution_Name.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImmediateLevel", PropertyDisplayNameKey="Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name/Solution_Name.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("17f00488-b6fd-49aa-8307-5f56e9a25e19")]
		public virtual Solution_Name Solution_Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Solution_Name)DslModeling::DomainRoleInfo.GetRolePlayer(this, Solution_NameDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, Solution_NameDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Solution_Name of a ImmediateLevel
		/// <summary>
		/// Gets Solution_Name.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Solution_Name GetSolution_Name(ImmediateLevel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImmediateLevelDomainRoleId) as Solution_Name;
		}
		
		/// <summary>
		/// Sets Solution_Name.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSolution_Name(ImmediateLevel element, Solution_Name newSolution_Name)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImmediateLevelDomainRoleId, newSolution_Name);
		}
		#endregion
		#region ImmediateLevel link accessor
		/// <summary>
		/// Get the ImmediateLevelHasSolution_Name link to a ImmediateLevel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name GetLinkToSolution_Name (global::Company.FinalVersionSoSa.ImmediateLevel immediateLevelInstance)
		{
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name>(immediateLevelInstance, global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.ImmediateLevelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImmediateLevel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Solution_Name link accessor
		/// <summary>
		/// Get the ImmediateLevelHasSolution_Name link to a Solution_Name.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name GetLinkToImmediateLevel (global::Company.FinalVersionSoSa.Solution_Name solution_NameInstance)
		{
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name>(solution_NameInstance, global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.Solution_NameDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Solution_Name not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImmediateLevelHasSolution_Name instance accessors
		
		/// <summary>
		/// Get any ImmediateLevelHasSolution_Name links between a given ImmediateLevel and a Solution_Name.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name> GetLinks( global::Company.FinalVersionSoSa.ImmediateLevel source, global::Company.FinalVersionSoSa.Solution_Name target )
		{
			global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name> outLinks = new global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name>();
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name>(source, global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.ImmediateLevelDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name link in links )
			{
				if ( target.Equals(link.Solution_Name) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImmediateLevelHasSolution_Name link between a given ImmediateLeveland a Solution_Name.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name GetLink( global::Company.FinalVersionSoSa.ImmediateLevel source, global::Company.FinalVersionSoSa.Solution_Name target )
		{
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name>(source, global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.ImmediateLevelDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name link in links )
			{
				if ( target.Equals(link.Solution_Name) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainRelationship ImpactLevelsHasConcerned
	/// Description for Company.FinalVersionSoSa.ImpactLevelsHasConcerned
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImpactLevelsHasConcerned.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImpactLevelsHasConcerned.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7a8938f9-2ccb-4773-9348-df0248e394ac")]
	public partial class ImpactLevelsHasConcerned : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImpactLevelsHasConcerned domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7a8938f9, 0x2ccb, 0x4773, 0x93, 0x48, 0xdf, 0x02, 0x48, 0xe3, 0x94, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImpactLevelsHasConcerned link in the same Partition as the given ImpactLevels
		/// </summary>
		/// <param name="source">ImpactLevels to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public ImpactLevelsHasConcerned(ImpactLevels source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImpactLevelsHasConcerned.ImpactLevelsDomainRoleId, source), new DslModeling::RoleAssignment(ImpactLevelsHasConcerned.ConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsHasConcerned(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsHasConcerned(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImpactLevelsHasConcerned(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImpactLevelsHasConcerned(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ImpactLevels domain role code
		
		/// <summary>
		/// ImpactLevels domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpactLevelsDomainRoleId = new global::System.Guid(0x939437d3, 0x6ffc, 0x41e6, 0x8f, 0x53, 0x77, 0x99, 0x15, 0xaa, 0xe5, 0x88);
		
		/// <summary>
		/// DomainRole ImpactLevels
		/// Description for Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ImpactLevels
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImpactLevelsHasConcerned/ImpactLevels.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImpactLevelsHasConcerned/ImpactLevels.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Concerned", PropertyDisplayNameKey="Company.FinalVersionSoSa.ImpactLevelsHasConcerned/ImpactLevels.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("939437d3-6ffc-41e6-8f53-779915aae588")]
		public virtual ImpactLevels ImpactLevels
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpactLevels)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpactLevelsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpactLevelsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpactLevels of a Concern
		/// <summary>
		/// Gets ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImpactLevels GetImpactLevels(Concern element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConcernDomainRoleId) as ImpactLevels;
		}
		
		/// <summary>
		/// Sets ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpactLevels(Concern element, ImpactLevels newImpactLevels)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConcernDomainRoleId, newImpactLevels);
		}
		#endregion
		#region Concern domain role code
		
		/// <summary>
		/// Concern domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernDomainRoleId = new global::System.Guid(0x86391e46, 0x6a00, 0x4a29, 0x8d, 0x7f, 0x87, 0xf8, 0xf6, 0x6e, 0xa4, 0xad);
		
		/// <summary>
		/// DomainRole Concern
		/// Description for Company.FinalVersionSoSa.ImpactLevelsHasConcerned.Concern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ImpactLevelsHasConcerned/Concern.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ImpactLevelsHasConcerned/Concern.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImpactLevels", PropertyDisplayNameKey="Company.FinalVersionSoSa.ImpactLevelsHasConcerned/Concern.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("86391e46-6a00-4a29-8d7f-87f8f66ea4ad")]
		public virtual Concern Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Concerned of a ImpactLevels
		/// <summary>
		/// Gets a list of Concerned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetConcerned(ImpactLevels element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, ImpactLevelsDomainRoleId);
		}
		#endregion
		#region ImpactLevels link accessor
		/// <summary>
		/// Get the list of ImpactLevelsHasConcerned links to a ImpactLevels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned> GetLinksToConcerned ( global::Company.FinalVersionSoSa.ImpactLevels impactLevelsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned>(impactLevelsInstance, global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ImpactLevelsDomainRoleId);
		}
		#endregion
		#region Concern link accessor
		/// <summary>
		/// Get the ImpactLevelsHasConcerned link to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned GetLinkToImpactLevels (global::Company.FinalVersionSoSa.Concern concernInstance)
		{
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned>(concernInstance, global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ConcernDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Concern not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImpactLevelsHasConcerned instance accessors
		
		/// <summary>
		/// Get any ImpactLevelsHasConcerned links between a given ImpactLevels and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned> GetLinks( global::Company.FinalVersionSoSa.ImpactLevels source, global::Company.FinalVersionSoSa.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned> outLinks = new global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned>();
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned>(source, global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ImpactLevelsDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImpactLevelsHasConcerned link between a given ImpactLevelsand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned GetLink( global::Company.FinalVersionSoSa.ImpactLevels source, global::Company.FinalVersionSoSa.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned>(source, global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ImpactLevelsDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainRelationship ConcernReferencesTargetConcerned
	/// Description for Company.FinalVersionSoSa.ConcernReferencesTargetConcerned
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("83de93e9-528c-434e-a30a-58f7d494d20c")]
	public partial class ConcernReferencesTargetConcerned : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConcernReferencesTargetConcerned domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x83de93e9, 0x528c, 0x434e, 0xa3, 0x0a, 0x58, 0xf7, 0xd4, 0x94, 0xd2, 0x0c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConcernReferencesTargetConcerned link in the same Partition as the given Concern
		/// </summary>
		/// <param name="source">Concern to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public ConcernReferencesTargetConcerned(Concern source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConcernReferencesTargetConcerned.SourceConcernDomainRoleId, source), new DslModeling::RoleAssignment(ConcernReferencesTargetConcerned.TargetConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConcernReferencesTargetConcerned(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConcernReferencesTargetConcerned(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConcernReferencesTargetConcerned(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConcernReferencesTargetConcerned(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceConcern domain role code
		
		/// <summary>
		/// SourceConcern domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceConcernDomainRoleId = new global::System.Guid(0x17d892d2, 0x8d9e, 0x43bf, 0xa6, 0x56, 0xf1, 0xa2, 0x6f, 0xef, 0x43, 0x1c);
		
		/// <summary>
		/// DomainRole SourceConcern
		/// Description for
		/// Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.SourceConcern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ConcernReferencesTargetConcerned/SourceConcern.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ConcernReferencesTargetConcerned/SourceConcern.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetConcerned", PropertyDisplayNameKey="Company.FinalVersionSoSa.ConcernReferencesTargetConcerned/SourceConcern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("17d892d2-8d9e-43bf-a656-f1a26fef431c")]
		public virtual Concern SourceConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceConcerned of a Concern
		/// <summary>
		/// Gets a list of SourceConcerned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetSourceConcerned(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, TargetConcernDomainRoleId);
		}
		#endregion
		#region TargetConcern domain role code
		
		/// <summary>
		/// TargetConcern domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetConcernDomainRoleId = new global::System.Guid(0xa17ea144, 0xceaf, 0x4117, 0xa6, 0xc6, 0xdd, 0x90, 0x93, 0x5f, 0x41, 0x6d);
		
		/// <summary>
		/// DomainRole TargetConcern
		/// Description for
		/// Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.TargetConcern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ConcernReferencesTargetConcerned/TargetConcern.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ConcernReferencesTargetConcerned/TargetConcern.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceConcerned", PropertyDisplayNameKey="Company.FinalVersionSoSa.ConcernReferencesTargetConcerned/TargetConcern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a17ea144-ceaf-4117-a6c6-dd90935f416d")]
		public virtual Concern TargetConcern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetConcerned of a Concern
		/// <summary>
		/// Gets a list of TargetConcerned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetTargetConcerned(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, SourceConcernDomainRoleId);
		}
		#endregion
		#region SourceConcern link accessor
		/// <summary>
		/// Get the list of ConcernReferencesTargetConcerned links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned> GetLinksToTargetConcerned ( global::Company.FinalVersionSoSa.Concern sourceConcernInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned>(sourceConcernInstance, global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.SourceConcernDomainRoleId);
		}
		#endregion
		#region TargetConcern link accessor
		/// <summary>
		/// Get the list of ConcernReferencesTargetConcerned links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned> GetLinksToSourceConcerned ( global::Company.FinalVersionSoSa.Concern targetConcernInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned>(targetConcernInstance, global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.TargetConcernDomainRoleId);
		}
		#endregion
		#region ConcernReferencesTargetConcerned instance accessors
		
		/// <summary>
		/// Get any ConcernReferencesTargetConcerned links between a given Concern and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned> GetLinks( global::Company.FinalVersionSoSa.Concern source, global::Company.FinalVersionSoSa.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned> outLinks = new global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned>();
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned>(source, global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.SourceConcernDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned link in links )
			{
				if ( target.Equals(link.TargetConcern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConcernReferencesTargetConcerned link between a given Concernand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned GetLink( global::Company.FinalVersionSoSa.Concern source, global::Company.FinalVersionSoSa.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned>(source, global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned.SourceConcernDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.ConcernReferencesTargetConcerned link in links )
			{
				if ( target.Equals(link.TargetConcern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainRelationship Solution_NameReferencesConcerned
	/// Description for Company.FinalVersionSoSa.Solution_NameReferencesConcerned
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.Solution_NameReferencesConcerned.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.Solution_NameReferencesConcerned.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("89ea109f-af06-40bc-ae87-3e35495f44c9")]
	public partial class Solution_NameReferencesConcerned : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Solution_NameReferencesConcerned domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89ea109f, 0xaf06, 0x40bc, 0xae, 0x87, 0x3e, 0x35, 0x49, 0x5f, 0x44, 0xc9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Solution_NameReferencesConcerned link in the same Partition as the given Solution_Name
		/// </summary>
		/// <param name="source">Solution_Name to use as the source of the relationship.</param>
		/// <param name="target">Concern to use as the target of the relationship.</param>
		public Solution_NameReferencesConcerned(Solution_Name source, Concern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Solution_NameReferencesConcerned.Solution_NameDomainRoleId, source), new DslModeling::RoleAssignment(Solution_NameReferencesConcerned.ConcernDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Solution_NameReferencesConcerned(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Solution_NameReferencesConcerned(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Solution_NameReferencesConcerned(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Solution_NameReferencesConcerned(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Solution_Name domain role code
		
		/// <summary>
		/// Solution_Name domain role Id.
		/// </summary>
		public static readonly global::System.Guid Solution_NameDomainRoleId = new global::System.Guid(0xfea0ff9f, 0xc2c9, 0x4d91, 0xa5, 0x82, 0x5d, 0x1b, 0x56, 0x34, 0x79, 0x19);
		
		/// <summary>
		/// DomainRole Solution_Name
		/// Description for
		/// Company.FinalVersionSoSa.Solution_NameReferencesConcerned.Solution_Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.Solution_NameReferencesConcerned/Solution_Name.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.Solution_NameReferencesConcerned/Solution_Name.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Concerned", PropertyDisplayNameKey="Company.FinalVersionSoSa.Solution_NameReferencesConcerned/Solution_Name.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fea0ff9f-c2c9-4d91-a582-5d1b56347919")]
		public virtual Solution_Name Solution_Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Solution_Name)DslModeling::DomainRoleInfo.GetRolePlayer(this, Solution_NameDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, Solution_NameDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Solution_Named of a Concern
		/// <summary>
		/// Gets a list of Solution_Named.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Solution_Name> GetSolution_Named(Concern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Solution_Name>, Solution_Name>(element, ConcernDomainRoleId);
		}
		#endregion
		#region Concern domain role code
		
		/// <summary>
		/// Concern domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcernDomainRoleId = new global::System.Guid(0xacb8b1e0, 0xf8a2, 0x43c1, 0x8a, 0xaf, 0x2c, 0xea, 0x0c, 0x0e, 0xf2, 0x53);
		
		/// <summary>
		/// DomainRole Concern
		/// Description for
		/// Company.FinalVersionSoSa.Solution_NameReferencesConcerned.Concern
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.Solution_NameReferencesConcerned/Concern.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.Solution_NameReferencesConcerned/Concern.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Solution_Named", PropertyDisplayNameKey="Company.FinalVersionSoSa.Solution_NameReferencesConcerned/Concern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("acb8b1e0-f8a2-43c1-8aaf-2cea0c0ef253")]
		public virtual Concern Concern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concern)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcernDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcernDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Concerned of a Solution_Name
		/// <summary>
		/// Gets a list of Concerned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concern> GetConcerned(Solution_Name element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concern>, Concern>(element, Solution_NameDomainRoleId);
		}
		#endregion
		#region Solution_Name link accessor
		/// <summary>
		/// Get the list of Solution_NameReferencesConcerned links to a Solution_Name.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned> GetLinksToConcerned ( global::Company.FinalVersionSoSa.Solution_Name solution_NameInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned>(solution_NameInstance, global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned.Solution_NameDomainRoleId);
		}
		#endregion
		#region Concern link accessor
		/// <summary>
		/// Get the list of Solution_NameReferencesConcerned links to a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned> GetLinksToSolution_Named ( global::Company.FinalVersionSoSa.Concern concernInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned>(concernInstance, global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned.ConcernDomainRoleId);
		}
		#endregion
		#region Solution_NameReferencesConcerned instance accessors
		
		/// <summary>
		/// Get any Solution_NameReferencesConcerned links between a given Solution_Name and a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned> GetLinks( global::Company.FinalVersionSoSa.Solution_Name source, global::Company.FinalVersionSoSa.Concern target )
		{
			global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned> outLinks = new global::System.Collections.Generic.List<global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned>();
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned>(source, global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned.Solution_NameDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Solution_NameReferencesConcerned link between a given Solution_Nameand a Concern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned GetLink( global::Company.FinalVersionSoSa.Solution_Name source, global::Company.FinalVersionSoSa.Concern target )
		{
			global::System.Collections.Generic.IList<global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned>(source, global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned.Solution_NameDomainRoleId);
			foreach ( global::Company.FinalVersionSoSa.Solution_NameReferencesConcerned link in links )
			{
				if ( target.Equals(link.Concern) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
