//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass ConcernConnector
	/// Description for Company.FinalVersionSoSa.ConcernConnector
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ConcernConnector.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ConcernConnector.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ca59248a-60bd-4796-b8f3-918722af2fb8")]
	public partial class ConcernConnector : DslDiagrams::BinaryLinkShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ConcernConnector.
		/// </summary>
		public static DslDiagrams::Decorator FindConcernConnectorDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		
		#region Connector styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Regular ;
			fontSettings.Size = 20/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular20"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Initializes resources associated with this connector instance.
		/// </summary>
		protected override void InitializeInstanceResources()
		{
			base.InitializeInstanceResources();
			this.SetDecorators(null, new DslDiagrams::SizeD(0.1,0.1), DslDiagrams::LinkDecorator.DecoratorFilledArrow, new DslDiagrams::SizeD(0.1,0.1), false);
		}
		
		#endregion
		
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("Positive");
			field1.DefaultText = global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel.SingletonResourceManager.GetString("ConcernConnectorPositiveDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular20");			
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ConnectorDecorator(field1, DslDiagrams::ConnectorDecoratorPosition.TargetTop, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("Negative");
			field2.DefaultText = global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel.SingletonResourceManager.GetString("ConcernConnectorNegativeDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field2.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular20");			
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ConnectorDecorator(field2, DslDiagrams::ConnectorDecoratorPosition.TargetTop, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
		}
		
		#endregion
		
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConcernConnector domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xca59248a, 0x60bd, 0x4796, 0xb8, 0xf3, 0x91, 0x87, 0x22, 0xaf, 0x2f, 0xb8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConcernConnector(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConcernConnector(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Influence domain property code
		
		/// <summary>
		/// Influence domain property Id.
		/// </summary>
		public static readonly global::System.Guid InfluenceDomainPropertyId = new global::System.Guid(0x1a7eff5a, 0xfbcd, 0x4d6d, 0xbe, 0x52, 0xe6, 0x04, 0x81, 0x9b, 0x69, 0xc4);
		
		/// <summary>
		/// Storage for Influence
		/// </summary>
		private global::System.Boolean influencePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Influence domain property.
		/// Description for Company.FinalVersionSoSa.ConcernConnector.Influence
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ConcernConnector/Influence.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ConcernConnector/Influence.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1a7eff5a-fbcd-4d6d-be52-e604819b69c4")]
		public global::System.Boolean Influence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return influencePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InfluencePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConcernConnector.Influence domain property.
		/// </summary>
		internal sealed partial class InfluencePropertyHandler : DslModeling::DomainPropertyValueHandler<ConcernConnector, global::System.Boolean>
		{
			private InfluencePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConcernConnector.Influence domain property value handler.
			/// </summary>
			public static readonly InfluencePropertyHandler Instance = new InfluencePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConcernConnector.Influence domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InfluenceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConcernConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.influencePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConcernConnector element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.influencePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PositiveProp domain property code
		
		/// <summary>
		/// PositiveProp domain property Id.
		/// </summary>
		public static readonly global::System.Guid PositivePropDomainPropertyId = new global::System.Guid(0xbec32291, 0xf367, 0x4093, 0x82, 0xbc, 0x3a, 0x6b, 0x6d, 0x38, 0x6e, 0x82);
		
		/// <summary>
		/// Storage for PositiveProp
		/// </summary>
		private global::System.String positivePropPropertyStorage = "+";
		
		/// <summary>
		/// Gets or sets the value of PositiveProp domain property.
		/// Description for Company.FinalVersionSoSa.ConcernConnector.+
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ConcernConnector/PositiveProp.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ConcernConnector/PositiveProp.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("+")]
		[DslModeling::DomainObjectId("bec32291-f367-4093-82bc-3a6b6d386e82")]
		public global::System.String PositiveProp
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return positivePropPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PositivePropPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConcernConnector.PositiveProp domain property.
		/// </summary>
		internal sealed partial class PositivePropPropertyHandler : DslModeling::DomainPropertyValueHandler<ConcernConnector, global::System.String>
		{
			private PositivePropPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConcernConnector.PositiveProp domain property value handler.
			/// </summary>
			public static readonly PositivePropPropertyHandler Instance = new PositivePropPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConcernConnector.PositiveProp domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PositivePropDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConcernConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.positivePropPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConcernConnector element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.positivePropPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NegativeProp domain property code
		
		/// <summary>
		/// NegativeProp domain property Id.
		/// </summary>
		public static readonly global::System.Guid NegativePropDomainPropertyId = new global::System.Guid(0x8bec20ea, 0xcf7d, 0x4e68, 0x8c, 0x7f, 0x1d, 0x16, 0x63, 0x25, 0x0b, 0xaa);
		
		/// <summary>
		/// Storage for NegativeProp
		/// </summary>
		private global::System.String negativePropPropertyStorage = "_";
		
		/// <summary>
		/// Gets or sets the value of NegativeProp domain property.
		/// Description for Company.FinalVersionSoSa.ConcernConnector.-
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.ConcernConnector/NegativeProp.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.ConcernConnector/NegativeProp.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("_")]
		[DslModeling::DomainObjectId("8bec20ea-cf7d-4e68-8c7f-1d1663250baa")]
		public global::System.String NegativeProp
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return negativePropPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NegativePropPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConcernConnector.NegativeProp domain property.
		/// </summary>
		internal sealed partial class NegativePropPropertyHandler : DslModeling::DomainPropertyValueHandler<ConcernConnector, global::System.String>
		{
			private NegativePropPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConcernConnector.NegativeProp domain property value handler.
			/// </summary>
			public static readonly NegativePropPropertyHandler Instance = new NegativePropPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConcernConnector.NegativeProp domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NegativePropDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConcernConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.negativePropPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConcernConnector element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.negativePropPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainClass SolutionConcernConnector
	/// Description for Company.FinalVersionSoSa.SolutionConcernConnector
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.SolutionConcernConnector.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.SolutionConcernConnector.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0d8ab37a-288f-4046-94de-049baae473f0")]
	public partial class SolutionConcernConnector : DslDiagrams::BinaryLinkShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with SolutionConcernConnector.
		/// </summary>
		public static DslDiagrams::Decorator FindSolutionConcernConnectorDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		
		#region Connector styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Regular ;
			fontSettings.Size = 20/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular20"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Initializes resources associated with this connector instance.
		/// </summary>
		protected override void InitializeInstanceResources()
		{
			base.InitializeInstanceResources();
			this.SetDecorators(null, new DslDiagrams::SizeD(0.1,0.1), DslDiagrams::LinkDecorator.DecoratorFilledArrow, new DslDiagrams::SizeD(0.1,0.1), false);
		}
		
		#endregion
		
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("Positive");
			field1.DefaultText = global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel.SingletonResourceManager.GetString("SolutionConcernConnectorPositiveDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular20");			
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ConnectorDecorator(field1, DslDiagrams::ConnectorDecoratorPosition.TargetTop, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("Negative");
			field2.DefaultText = global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel.SingletonResourceManager.GetString("SolutionConcernConnectorNegativeDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field2.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular20");			
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ConnectorDecorator(field2, DslDiagrams::ConnectorDecoratorPosition.TargetTop, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
		}
		
		#endregion
		
		#region Constructors, domain class Id
	
		/// <summary>
		/// SolutionConcernConnector domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0d8ab37a, 0x288f, 0x4046, 0x94, 0xde, 0x04, 0x9b, 0xaa, 0xe4, 0x73, 0xf0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SolutionConcernConnector(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SolutionConcernConnector(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Influence domain property code
		
		/// <summary>
		/// Influence domain property Id.
		/// </summary>
		public static readonly global::System.Guid InfluenceDomainPropertyId = new global::System.Guid(0xef50f05b, 0xee3d, 0x4426, 0xa0, 0xa0, 0x60, 0x89, 0x99, 0x97, 0x1d, 0xfa);
		
		/// <summary>
		/// Storage for Influence
		/// </summary>
		private global::System.Boolean influencePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Influence domain property.
		/// Description for Company.FinalVersionSoSa.SolutionConcernConnector.Influence
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.SolutionConcernConnector/Influence.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.SolutionConcernConnector/Influence.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ef50f05b-ee3d-4426-a0a0-608999971dfa")]
		public global::System.Boolean Influence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return influencePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InfluencePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SolutionConcernConnector.Influence domain property.
		/// </summary>
		internal sealed partial class InfluencePropertyHandler : DslModeling::DomainPropertyValueHandler<SolutionConcernConnector, global::System.Boolean>
		{
			private InfluencePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SolutionConcernConnector.Influence domain property value handler.
			/// </summary>
			public static readonly InfluencePropertyHandler Instance = new InfluencePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SolutionConcernConnector.Influence domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InfluenceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SolutionConcernConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.influencePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SolutionConcernConnector element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.influencePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PositiveProp domain property code
		
		/// <summary>
		/// PositiveProp domain property Id.
		/// </summary>
		public static readonly global::System.Guid PositivePropDomainPropertyId = new global::System.Guid(0x5da9a8f5, 0xe6ea, 0x4e40, 0x87, 0xbe, 0x19, 0x63, 0xb4, 0x85, 0xa3, 0xbf);
		
		/// <summary>
		/// Storage for PositiveProp
		/// </summary>
		private global::System.String positivePropPropertyStorage = "+";
		
		/// <summary>
		/// Gets or sets the value of PositiveProp domain property.
		/// Description for Company.FinalVersionSoSa.SolutionConcernConnector.+
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.SolutionConcernConnector/PositiveProp.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.SolutionConcernConnector/PositiveProp.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("+")]
		[DslModeling::DomainObjectId("5da9a8f5-e6ea-4e40-87be-1963b485a3bf")]
		public global::System.String PositiveProp
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return positivePropPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PositivePropPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SolutionConcernConnector.PositiveProp domain property.
		/// </summary>
		internal sealed partial class PositivePropPropertyHandler : DslModeling::DomainPropertyValueHandler<SolutionConcernConnector, global::System.String>
		{
			private PositivePropPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SolutionConcernConnector.PositiveProp domain property value handler.
			/// </summary>
			public static readonly PositivePropPropertyHandler Instance = new PositivePropPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SolutionConcernConnector.PositiveProp domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PositivePropDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SolutionConcernConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.positivePropPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SolutionConcernConnector element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.positivePropPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NegativeProp domain property code
		
		/// <summary>
		/// NegativeProp domain property Id.
		/// </summary>
		public static readonly global::System.Guid NegativePropDomainPropertyId = new global::System.Guid(0x03401bcc, 0x53aa, 0x468f, 0xb4, 0x04, 0x9e, 0xbd, 0x84, 0xda, 0xa3, 0x11);
		
		/// <summary>
		/// Storage for NegativeProp
		/// </summary>
		private global::System.String negativePropPropertyStorage = "_";
		
		/// <summary>
		/// Gets or sets the value of NegativeProp domain property.
		/// Description for Company.FinalVersionSoSa.SolutionConcernConnector.-
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.SolutionConcernConnector/NegativeProp.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FinalVersionSoSa.SolutionConcernConnector/NegativeProp.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("_")]
		[DslModeling::DomainObjectId("03401bcc-53aa-468f-b404-9ebd84daa311")]
		public global::System.String NegativeProp
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return negativePropPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NegativePropPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SolutionConcernConnector.NegativeProp domain property.
		/// </summary>
		internal sealed partial class NegativePropPropertyHandler : DslModeling::DomainPropertyValueHandler<SolutionConcernConnector, global::System.String>
		{
			private NegativePropPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SolutionConcernConnector.NegativeProp domain property value handler.
			/// </summary>
			public static readonly NegativePropPropertyHandler Instance = new NegativePropPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SolutionConcernConnector.NegativeProp domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NegativePropDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SolutionConcernConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.negativePropPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SolutionConcernConnector element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.negativePropPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
