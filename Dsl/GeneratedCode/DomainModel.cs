//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace Company.FinalVersionSoSa
{
	/// <summary>
	/// DomainModel FinalVersionSoSaDomainModel
	/// Description for Company.FinalVersionSoSa.FinalVersionSoSa
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FinalVersionSoSa.FinalVersionSoSaDomainModel.DisplayName", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FinalVersionSoSa.FinalVersionSoSaDomainModel.Description", typeof(global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel), "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("15349f0a-b78b-4273-be12-dba142deeda4")]
	public partial class FinalVersionSoSaDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// FinalVersionSoSaDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x15349f0a, 0xb78b, 0x4273, 0xbe, 0x12, 0xdb, 0xa1, 0x42, 0xde, 0xed, 0xa4);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public FinalVersionSoSaDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(SoSa),
				typeof(ImpactLevels),
				typeof(SystematicLevel),
				typeof(EnablingLevel),
				typeof(ImmediateLevel),
				typeof(Solution_Name),
				typeof(Concern),
				typeof(SocialConcern),
				typeof(EconomicalConcern),
				typeof(EnvironmentalConcern),
				typeof(TechnicalConcern),
				typeof(SoSaHasElements),
				typeof(ImpactLevelsReferencesTargets),
				typeof(ImmediateLevelHasSolution_Name),
				typeof(ImpactLevelsHasConcerned),
				typeof(ConcernReferencesTargetConcerned),
				typeof(Solution_NameReferencesConcerned),
				typeof(FinalVersionSoSaDiagram),
				typeof(ConcernConnector),
				typeof(SolutionConcernConnector),
				typeof(ImpactLevelShape),
				typeof(SystematicShape),
				typeof(EnablingShape),
				typeof(ImmediateShape),
				typeof(SolutionShape),
				typeof(ConcernShape),
				typeof(SocialShape),
				typeof(EcoShape),
				typeof(EnvShape),
				typeof(TechShape),
				typeof(global::Company.FinalVersionSoSa.FixUpDiagram),
				typeof(global::Company.FinalVersionSoSa.DecoratorPropertyChanged),
				typeof(global::Company.FinalVersionSoSa.ConnectorRolePlayerChanged),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(ImpactLevels), "Name", ImpactLevels.NameDomainPropertyId, typeof(ImpactLevels.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Solution_Name), "Name", Solution_Name.NameDomainPropertyId, typeof(Solution_Name.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Concern), "Name", Concern.NameDomainPropertyId, typeof(Concern.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ConcernConnector), "Influence", ConcernConnector.InfluenceDomainPropertyId, typeof(ConcernConnector.InfluencePropertyHandler)),
				new DomainMemberInfo(typeof(ConcernConnector), "PositiveProp", ConcernConnector.PositivePropDomainPropertyId, typeof(ConcernConnector.PositivePropPropertyHandler)),
				new DomainMemberInfo(typeof(ConcernConnector), "NegativeProp", ConcernConnector.NegativePropDomainPropertyId, typeof(ConcernConnector.NegativePropPropertyHandler)),
				new DomainMemberInfo(typeof(SolutionConcernConnector), "Influence", SolutionConcernConnector.InfluenceDomainPropertyId, typeof(SolutionConcernConnector.InfluencePropertyHandler)),
				new DomainMemberInfo(typeof(SolutionConcernConnector), "PositiveProp", SolutionConcernConnector.PositivePropDomainPropertyId, typeof(SolutionConcernConnector.PositivePropPropertyHandler)),
				new DomainMemberInfo(typeof(SolutionConcernConnector), "NegativeProp", SolutionConcernConnector.NegativePropDomainPropertyId, typeof(SolutionConcernConnector.NegativePropPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(SoSaHasElements), "SoSa", SoSaHasElements.SoSaDomainRoleId),
				new DomainRolePlayerInfo(typeof(SoSaHasElements), "Element", SoSaHasElements.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImpactLevelsReferencesTargets), "Source", ImpactLevelsReferencesTargets.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImpactLevelsReferencesTargets), "Target", ImpactLevelsReferencesTargets.TargetDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImmediateLevelHasSolution_Name), "ImmediateLevel", ImmediateLevelHasSolution_Name.ImmediateLevelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImmediateLevelHasSolution_Name), "Solution_Name", ImmediateLevelHasSolution_Name.Solution_NameDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImpactLevelsHasConcerned), "ImpactLevels", ImpactLevelsHasConcerned.ImpactLevelsDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImpactLevelsHasConcerned), "Concern", ImpactLevelsHasConcerned.ConcernDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConcernReferencesTargetConcerned), "SourceConcern", ConcernReferencesTargetConcerned.SourceConcernDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConcernReferencesTargetConcerned), "TargetConcern", ConcernReferencesTargetConcerned.TargetConcernDomainRoleId),
				new DomainRolePlayerInfo(typeof(Solution_NameReferencesConcerned), "Solution_Name", Solution_NameReferencesConcerned.Solution_NameDomainRoleId),
				new DomainRolePlayerInfo(typeof(Solution_NameReferencesConcerned), "Concern", Solution_NameReferencesConcerned.ConcernDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(24);
				createElementMap.Add(typeof(SoSa), 0);
				createElementMap.Add(typeof(ImpactLevels), 1);
				createElementMap.Add(typeof(SystematicLevel), 2);
				createElementMap.Add(typeof(EnablingLevel), 3);
				createElementMap.Add(typeof(ImmediateLevel), 4);
				createElementMap.Add(typeof(Solution_Name), 5);
				createElementMap.Add(typeof(Concern), 6);
				createElementMap.Add(typeof(SocialConcern), 7);
				createElementMap.Add(typeof(EconomicalConcern), 8);
				createElementMap.Add(typeof(EnvironmentalConcern), 9);
				createElementMap.Add(typeof(TechnicalConcern), 10);
				createElementMap.Add(typeof(FinalVersionSoSaDiagram), 11);
				createElementMap.Add(typeof(ConcernConnector), 12);
				createElementMap.Add(typeof(SolutionConcernConnector), 13);
				createElementMap.Add(typeof(ImpactLevelShape), 14);
				createElementMap.Add(typeof(SystematicShape), 15);
				createElementMap.Add(typeof(EnablingShape), 16);
				createElementMap.Add(typeof(ImmediateShape), 17);
				createElementMap.Add(typeof(SolutionShape), 18);
				createElementMap.Add(typeof(ConcernShape), 19);
				createElementMap.Add(typeof(SocialShape), 20);
				createElementMap.Add(typeof(EcoShape), 21);
				createElementMap.Add(typeof(EnvShape), 22);
				createElementMap.Add(typeof(TechShape), 23);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new SoSa(partition, propertyAssignments);
				case 1: return new ImpactLevels(partition, propertyAssignments);
				case 2: return new SystematicLevel(partition, propertyAssignments);
				case 3: return new EnablingLevel(partition, propertyAssignments);
				case 4: return new ImmediateLevel(partition, propertyAssignments);
				case 5: return new Solution_Name(partition, propertyAssignments);
				case 6: return new Concern(partition, propertyAssignments);
				case 7: return new SocialConcern(partition, propertyAssignments);
				case 8: return new EconomicalConcern(partition, propertyAssignments);
				case 9: return new EnvironmentalConcern(partition, propertyAssignments);
				case 10: return new TechnicalConcern(partition, propertyAssignments);
				case 11: return new FinalVersionSoSaDiagram(partition, propertyAssignments);
				case 12: return new ConcernConnector(partition, propertyAssignments);
				case 13: return new SolutionConcernConnector(partition, propertyAssignments);
				case 14: return new ImpactLevelShape(partition, propertyAssignments);
				case 15: return new SystematicShape(partition, propertyAssignments);
				case 16: return new EnablingShape(partition, propertyAssignments);
				case 17: return new ImmediateShape(partition, propertyAssignments);
				case 18: return new SolutionShape(partition, propertyAssignments);
				case 19: return new ConcernShape(partition, propertyAssignments);
				case 20: return new SocialShape(partition, propertyAssignments);
				case 21: return new EcoShape(partition, propertyAssignments);
				case 22: return new EnvShape(partition, propertyAssignments);
				case 23: return new TechShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(6);
				createElementLinkMap.Add(typeof(SoSaHasElements), 0);
				createElementLinkMap.Add(typeof(ImpactLevelsReferencesTargets), 1);
				createElementLinkMap.Add(typeof(ImmediateLevelHasSolution_Name), 2);
				createElementLinkMap.Add(typeof(ImpactLevelsHasConcerned), 3);
				createElementLinkMap.Add(typeof(ConcernReferencesTargetConcerned), 4);
				createElementLinkMap.Add(typeof(Solution_NameReferencesConcerned), 5);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Company.FinalVersionSoSa.FinalVersionSoSaDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new SoSaHasElements(partition, roleAssignments, propertyAssignments);
				case 1: return new ImpactLevelsReferencesTargets(partition, roleAssignments, propertyAssignments);
				case 2: return new ImmediateLevelHasSolution_Name(partition, roleAssignments, propertyAssignments);
				case 3: return new ImpactLevelsHasConcerned(partition, roleAssignments, propertyAssignments);
				case 4: return new ConcernReferencesTargetConcerned(partition, roleAssignments, propertyAssignments);
				case 5: return new Solution_NameReferencesConcerned(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Company.FinalVersionSoSa.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FinalVersionSoSaDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (FinalVersionSoSaDomainModel.resourceManager == null)
				{
					FinalVersionSoSaDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(FinalVersionSoSaDomainModel).Assembly);
				}
				return FinalVersionSoSaDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return FinalVersionSoSaDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return FinalVersionSoSaDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (FinalVersionSoSaDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new FinalVersionSoSaCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					FinalVersionSoSaDomainModel.copyClosure = copyFilter;
				}
				return FinalVersionSoSaDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (FinalVersionSoSaDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new FinalVersionSoSaDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					FinalVersionSoSaDomainModel.removeClosure = removeFilter;
				}
				return FinalVersionSoSaDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::Company.FinalVersionSoSa.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::Company.FinalVersionSoSa.DecoratorPropertyChanged));
			ruleManager.EnableRule(typeof(global::Company.FinalVersionSoSa.ConnectorRolePlayerChanged));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::Company.FinalVersionSoSa.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::Company.FinalVersionSoSa.DecoratorPropertyChanged));
			ruleManager.DisableRule(typeof(global::Company.FinalVersionSoSa.ConnectorRolePlayerChanged));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class FinalVersionSoSaDeleteClosure : FinalVersionSoSaDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FinalVersionSoSaDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class FinalVersionSoSaDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public FinalVersionSoSaDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Company.FinalVersionSoSa.SoSaHasElements.ElementDomainRoleId, true);
			DomainRoles.Add(global::Company.FinalVersionSoSa.ImmediateLevelHasSolution_Name.Solution_NameDomainRoleId, true);
			DomainRoles.Add(global::Company.FinalVersionSoSa.ImpactLevelsHasConcerned.ConcernDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class FinalVersionSoSaCopyClosure : FinalVersionSoSaCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FinalVersionSoSaCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class FinalVersionSoSaCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FinalVersionSoSaCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}

